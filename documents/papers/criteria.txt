Goal of the paper:
	Find promising parallelization techniques and list their pro's and cons. Determine the challenges and explain which one is the hardest to solve and which of the discussed approaches handles it the best. 


Criteria suggestions:

Audience:
	researchers - Programmers who dedicate their research to parallelization techniques
	professionals - Programmers with experience in writing performant parallel applications
	application programmers - People who work in the programming sector
	consumer programmers - Average people who learn programming for their enjoyment and automating basic tasks

Type:
	some library functions - macros/functions/abstract data types
	special design patterns - A design pattern is a recurring problem and a reusable solution to it. Separation of concerns, split solution computation and orchestration

Extensibility (if applicable):
	Allows defining your own constructs
	
Flexibility (if applicable):
	Maximum flexibility if provided tools allow you to at least replicate the system (with maintainable code)

Application:
	Network of processors

Common parallelization techniques:
	task farm
	divide and conquer

